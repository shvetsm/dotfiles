#!/usr/bin/env bash
#
# Bspwm configuration
#

if ! bspc wm -g &>/dev/null; then
  exit 1
fi

killall -q polybar lemonbar xdrawrect

if [[ -s "$BSPWM_STATE" ]]; then
  exec "$LOCAL_ETC/bspwm/restore_state"; exit 0
fi

# Config vars {{{

size_border=1
size_gap=-1

pad=0

padding_top=$pad
padding_bottom=$pad
padding_left=$pad
padding_right=$pad

color_normal_border="#666666"
color_active_border="#666666"
color_focused_border="#cccccc"
color_presel_feedback="#888888"

[[ -e "${CURRENT_THEME}/bspwm" ]] && {
  source "${CURRENT_THEME}/bspwm"
}

# }}}
# General {{{

bspc config split_ratio "${setting_split_ratio:-0.5}"
#bspc config focus_by_distance "${setting_focus_by_distance:-true}"
#bspc config history_aware_focus "${setting_history_aware_focus:-true}"
bspc config focus_follows_pointer "${setting_focus_follows_pointer:-true}"
bspc config ignore_ewmh_focus "${setting_ignore_ewmh_focus:-true}"
bspc config pointer_modifier mod1

# }}}
# Monitors and desktops {{{

mon_internal="eDP-1"
mon_external="HDMI-1"

if ! xrandr -q | grep -q "eDP-1"; then
  mon_internal="eDP1"
fi

if ! xrandr -q | grep -q "HDMI-1"; then
  mon_external="HDMI1"
fi

if xrandr -q | grep -q "VIRTUAL1 conn"; then
  mon_external="VIRTUAL1"
fi

if bspc monitor $mon_external; then
  bspc monitor $mon_internal --reset-desktops  web term ws_3 ws_4 ws_5 code ws_7 ws_8 comms music
  bspc monitor $mon_external --reset-desktops  web term ws_3 ws_4 ws_5 code ws_7 ws_8 ws_9 ws_0
else
  bspc monitor $mon_internal --reset-desktops web term ws_3 ws_4 ws_5 code ws_7 ws_8 comms music
fi

bspc config pointer_follows_monitor "${setting_pointer_follow_monitor:-true}"
#bspc config remove_unplugged_monitors "${setting_remove_unplugged_monitors:-true}"
bspc config remove_disabled_monitors "${setting_remove_disabled_monitors:-false}"
#bspc config merge_overlapping_monitors "${setting_merge_overlapping_monitors:-false}"

# }}}
# Appearance {{{

bspc config top_padding ${padding_top:-0}
bspc config bottom_padding ${padding_bottom:-0}
bspc config left_padding ${padding_left:-0}
bspc config right_padding ${padding_right:-0}

bspc config border_width ${size_border:-0}
bspc config window_gap ${size_gap:-0}

bspc config borderless_monocle "${setting_borderless_monocle:-true}"
bspc config gapless_monocle "${setting_gapless_monocle:-false}"
bspc config single_monocle "${setting_single_monocle:-true}"

bspc config normal_border_color $color_normal_border
bspc config active_border_color $color_active_border
bspc config focused_border_color $color_focused_border
bspc config presel_feedback_color $color_presel_feedback

if [ -s "$HOME/.fehbg" ]; then
  source "$HOME/.fehbg" 2>/dev/null
elif [ -e "$HOME/.wallpapers/1.png" ]; then
  feh --bg-center --image-bg -B black "$HOME/.wallpapers/1.png"
fi

# }}}
# Rules {{{

bspc rule -a Lastpass "state=floating"
bspc rule -a Pcmanfm "state=floating"
bspc rule -a Gimp "state=floating"
bspc rule -a Steam "state=floating"
bspc rule -a Yad "state=floating"
bspc rule -a float "state=floating"

bspc rule -a Slack desktop=comms follow=true
bspc rule -a wavebox desktop=comms follow=true
bspc rule -a Enpass-Desktop desktop=ws_5 state=floating

bspc rule -a jetbrains-idea desktop=code follow=true

bspc config external_rules_command "$LOCAL_ETC/bspwm/external_rules"

# }}}

# Event listener :: monocle see-through fix {{{

# This routine is needed since, with true transparency, when in monocle mode
# all nodes in the desktop will be visible behind the focused node.
# And since the WM doesn't set the proper states (above, below, hidden, etc)
# I have to do it manually...

function push_window_state {
  while read -r id; do
    xsetprop --id="$id" --mode="${2:-replace}" --format=32a --propname=_NET_WM_STATE --value="$1" 2>/dev/null
  done
}

function pop_window_state {
  while read -r id; do
    xprop -id "$id" -remove _NET_WM_STATE 2>/dev/null
  done
}

# Only create the listener if the termite config uses a background color
# with an alpha value lower than 1.0
#if egrep -q -o 'background.*rgba\(([0-9,]+){3}.*0?\.[0-9]+\)$' "${XDG_CONFIG_HOME}/termite/config"; then
#  bspc subscribe desktop_layout node_focus | while read -r event; do
#    if [[ $(bspc query -T -d | json layout | tr -d '"') == "monocle" ]]; then
#      bspc query -N -n | pop_window_state _NET_WM_STATE_HIDDEN
#      bspc query -N -n '.local.!focused' | push_window_state _NET_WM_STATE_HIDDEN
#    else
#      bspc query -N -d | pop_window_state _NET_WM_STATE_HIDDEN
#    fi
#  done &
#fi

# }}}
# Event listener :: monocle-to-tiled on window open/close {{{

bspc subscribe node_manage node_unmanage | while read -r a event; do
  bspc desktop "${event%% *}:focused" -l tiled
done &

# }}}
# Event listener :: theme {{{

if [[ -n "$(type theme::event_listeners 2>/dev/null)" ]]; then
  theme::event_listeners 2>/dev/null &
fi

# }}}

# Polybar {{{

"${XDG_CONFIG_HOME}"/polybar/launch --kill-all \
  "${polybar_config:-${XDG_CONFIG_HOME}/polybar/bspwm.conf}" \
  "${polybar_bars[*]}"

bspc query -D | while read -r ws; do
  for side in top bottom left right; do
    bspc config -d "$ws" ${side}_padding 0
  done
done

# }}}
echo "bspwm configuration loaded..."

if [[ -n "$(type theme::post_bspwmrc 2>/dev/null)" ]]; then
  theme::post_bspwmrc 2>/dev/null &
fi
wavebox &
slack &
nm-applet &
enpass &
