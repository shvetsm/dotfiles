
[alias]
	# short aliases
	l = log --pretty=format:\"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate
	g = log --oneline --decorate --graph
	s = status -sb
	co = checkout
	b = branch -avv
	ll = log --pretty=format:\"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --numstat
	lds = log --pretty=format:\"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --date=short
	ld = log --pretty=format:\"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]\" --decorate --date=relative
	lc = log master..
	filelog = log -u
	fl = log -u
	dl = !git ll -1
	cp = cherry-pick
	st = status
	cl = clone
	ci = commit
	br = branch
	pur = pull --rebase
	la = !git config -l | grep alias | cut -c 7-
	diffs = !git diff | subl
	branchdiff = log --graph --left-right --cherry-pick --oneline
	sps = !git stash -u && git pull --rebase && git stash apply
	apc = !git add -A && git commit && git pull --rebase && git push
	ada = add --all :/
	pr = !f() { git fetch origin refs/pull/$1/head:pr/$1; git checkout pr/$1; } ; f
	cleanb = !git remote update -p; git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
	squash = "!f(){ git reset --soft HEAD~$(git rev-list --count master...) && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"

	up = !git update
	smash = !git ir

	unstage = reset HEAD
	undo-commit = reset --soft HEAD^

	# interactive rebase
	ir = !sh -c 'git rebase -i origin/${1-master}' -

	# log aliases
	log-branch = log origin/master..
	blog = !git log-branch
	mlog = !git log --committer=\"`git me`\"

	# update current branch
	update = !sh -c 'git fetch origin && git rebase -p origin/${1-master}' -

	# creates a diff of current branch against supplied branch, usage: git export-branch [refbranch]
	branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
	export-branch = !git format-patch --stdout $1 > ~/branches/`git branch-name`.diff

	# all commits that aren't merges on all branches
	all = !git log --pretty=oneline --abbrev-commit --all --no-merges

	# all commits today for only me
	today = !git all --since='12am' --committer=\"`git me`\"

	# today's commits without formatting or paging
	today-text = !git --no-pager today --no-color

	# files different from master on current branch
	fdm = !git diff origin/master... --name-status

	# last commit info in svn style
	last = !git show --name-status
	last-files = !git last --pretty=format:""

	# last commit only certain type of modification
	mlast = !git last-files | awk 'match($1, /M/) {print $2}'
	alast = !git last-files | awk 'match($1, /A/) {print $2}'
	dlast = !git last-files | awk 'match($1, /D/) {print $2}'

	# `git done`
	# current branch: merge, push, non-forced delete branch, show info
	done = !sh -c '~/bin/done -d $1' -

	# `git publish`
	# current branch: merge, push, show info
	publish = !sh -c '~/bin/done $1' -

	# `git lint`
	# lints all .php files that are different between current branch and origin/master
	lint = !sh -c '~/bin/lint'

	# `git spawn my-new-branch`
	# make new branch based on master no matter which branch is checked out
	spawn = !sh -c 'git checkout -b $1 ${2-master} && git config branch.$1.localmerge ${2-master}' -

	# `git nuke my-old-branch`
	# (Checks out master and does a non-forced delete on the branch entered)
	nuke = !git co master && sh -c 'git br -d $1' -

	# `git sync`
	# update current branch and master
	sync = !git update && \
		git co master && \
		git pull && \
		git co @{-1}

	# `git save`
	# saves a commit in current branch: local branches you will be rebasing
	save = !git commit -am \"save game\"

	# attempt to cleanup some common problems
	unfuck = !git fsck && git remote prune origin && git gc

	# find the top level of current repository
	top = !git rev-parse --show-toplevel

	# list files changed by last commit in absolute location
	list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed \"s|^|`git top`/|g\"

	# give a count of dirty files
	dirty = !git status --porcelain -uno | wc -l

	# number of non-merge commits
	peeps = !git log --pretty=format:"%Cblue%aN%Creset" --no-merges | sort | uniq -c | sort -rn
	mergers = !git log --pretty=format:"%Cred%aN%Creset" --merges | sort | uniq -c | sort -rn

	# awesome placeholders
	crunk = status
	deploy = status
	crazy = status
	stupid = status

[color]
	ui = auto

[core]
	autocrlf = input
	ignorecase = false
	whitespace = cr-at-eol
	editor = nvim
	pager = less -x4

[push]
	default = upstream

[help]
	autocorrect = 1
